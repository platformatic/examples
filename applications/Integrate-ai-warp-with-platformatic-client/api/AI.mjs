// This client was generated by Platformatic from an OpenAPI specification.

// The base URL for the API. This can be overridden by calling `setBaseUrl`.
let baseUrl = ''
/**  @type {import('./AI-types.d.ts').Ai['setBaseUrl']} */
export const setBaseUrl = (newUrl) => { baseUrl = newUrl }
function headersToJSON(headers) {
  const output = {}
  headers.forEach((value, key) => {
    output[key] = value
  })
  return output
}

async function _getExample (url, request) {

  const response = await fetch(`${url}/example`)

  const textResponses = [200]
  if (textResponses.includes(response.status)) {
    return {
      statusCode: response.status,
      headers: headersToJSON(response.headers),
      body: await response.text()
    }
  }
  if (response.headers.get('content-type') === 'application/json') {
    return {
      statusCode: response.status,
      headers: headersToJSON(response.headers),
      body: await response.json()
    }
  }
  return {
    statusCode: response.status,
    headers: headersToJSON(response.headers),
    body: await response.text()
  }
}

/**  @type {import('./AI-types.d.ts').Ai['getExample']} */
export const getExample = async (request) => {
  return await _getExample(baseUrl, request)
}
async function _postApiV1Prompt (url, request) {
  console.log(url)
  const headers = {
    'Content-type': 'application/json; charset=utf-8'
  }

  const response = await fetch(`${url}/api/v1/prompt`, {
    method: 'POST',
    body: JSON.stringify(request),
    headers
  })

  if (!response.ok) {
    throw new Error(await response.text())
  }

  return await response.json()
}

/**  @type {import('./AI-types.d.ts').Ai['postApiV1Prompt']} */
export const postApiV1Prompt = async (request) => {
  return await _postApiV1Prompt(baseUrl, request)
}
async function _postApiV1Stream (url, request) {
  const headers = {
    'Content-type': 'application/json; charset=utf-8'
  }

  const response = await fetch(`${url}/api/v1/stream`, {
    method: 'POST',
    body: JSON.stringify(request),
    headers
  })

  const textResponses = [200]
  if (textResponses.includes(response.status)) {
    return {
      statusCode: response.status,
      headers: headersToJSON(response.headers),
      body: await response.text()
    }
  }
  if (response.headers.get('content-type') === 'application/json') {
    return {
      statusCode: response.status,
      headers: headersToJSON(response.headers),
      body: await response.json()
    }
  }
  return {
    statusCode: response.status,
    headers: headersToJSON(response.headers),
    body: await response.text()
  }
}

/**  @type {import('./AI-types.d.ts').Ai['postApiV1Stream']} */
export const postApiV1Stream = async (request) => {
  return await _postApiV1Stream(baseUrl, request)
}
export default function build (url) {
  console.log(url)
  return {
    getExample: _getExample.bind(url, ...arguments),
    postApiV1Prompt: _postApiV1Prompt.bind(url, ...arguments),
    postApiV1Stream: _postApiV1Stream.bind(url, ...arguments)
  }
}